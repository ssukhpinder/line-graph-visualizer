{"version":3,"sources":["../webpack/bootstrap",".././src/js/api/injection.ts",".././src/js/helpers/index.ts",".././src/js/api/DataExtractorApiImpl.ts",".././src/js/api/default-extractors/index.ts",".././src/DataExtractionResult.ts",".././src/js/helpers/createGraph.ts",".././src/index.ts",".././src/js/index.ts",".././src/js/api/index.ts",".././src/js/api/default-extractors/registerDefaultDataExtractors.ts",".././src/js/api/default-extractors/TypeScriptDataExtractors.ts",".././src/js/api/default-extractors/AsIsDataExtractor.ts",".././src/js/api/default-extractors/GetDebugVisualizationDataExtractor.ts",".././src/js/api/default-extractors/ToStringExtractor.ts",".././src/js/api/default-extractors/PlotlyDataExtractor.ts",".././src/js/api/default-extractors/ObjectGraphExtractor.ts",".././src/js/helpers/createGraphFromPointers.ts",".././src/js/helpers/tryEval.ts",".././src/js/helpers/markedGrid.ts",".././src/js/api/default-extractors/GridExtractor.ts",".././src/js/global-helpers.ts","../external \"fs\"",".././src/CommonDataTypes.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","readFileSync","__filename","encoding","selfContainedGetInitializedDataExtractorApi","toString","apiKey","api","window","global","Error","installHelpers","helpers","globalHelpers","globalObj","DataExtractorApiImpl","ApiHasNotBeenInitializedCode","extractors","Map","data","JSON","stringify","extractor","this","set","id","e","registerExtractor","valueFn","evalFn","preferredDataExtractorId","extractions","Array","extractionCollector","extraction","push","lastEvalFn","undefined","values","getExtractions","sort","a","b","priority","usedExtraction","toJson","kind","preferred","find","mapExtractor","extractData","extractionResult","usedExtractor","availableExtractors","map","preferExisting","registerDefaultExtractors","val","obj","every","roots","infoSelector","options","graph","nodes","edges","idCounter","ids","getId","item","_id","queue","dist","processed","Set","length","shift","has","add","nodeInfo","fromId","toId","to","from","shouldPush","maxSize","size","getDataExtractorApi","TypeScriptAstDataExtractor","AsIsDataExtractor","GetDebugVisualizationDataExtractor","ToStringDataExtractor","PlotDataExtractor","ObjectGraphExtractor","GridExtractor","collector","tsApi","typescript","require","findKey","startsWith","member","isArray","indexOf","getChildren","node","result","forEachChild","toTreeNode","memberName","marked","emphasizedValueFn","SyntaxKind","children","childNode","idx","parentPropertyName","SyntaxList","some","filter","isIdentifier","text","escapedText","isLiteralExpression","end","pos","position","emphasizedValue","isMarked","isNode","isToken","getSourceFile","isSourceFile","parent","rootSourceFile","rootNode","fn","entries","finalRootSourceFile","addExtraction","tree","ast","root","fileName","context","isExtractedData","getDebugVisualization","x","plotly","y","isObject","createGraph","label","constructor","shape","color","marker","items","arr","array","rows","columns","tag","markers","row","column","keys"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","import * as fs from \"fs\";\nimport { DataExtractorApi } from \"./DataExtractorApi\";\nimport { DataExtractorApiImpl } from \"./DataExtractorApiImpl\";\nimport * as helpers from \"../helpers\";\nimport * as globalHelpers from \"../global-helpers\";\n\n/**\n * Returns standalone JS code representing an expression that initializes the data extraction API.\n * This expression returns nothing.\n * This function is called in the VS Code extension, the expression is evaluated in the debugee.\n */\nexport function getExpressionToInitializeDataExtractorApi(): string {\n\tconst _fs = require(\"fs\") as typeof fs;\n\tconst moduleSrc = _fs.readFileSync(__filename, { encoding: \"utf8\" });\n\treturn `((function () {\n\t\tlet module = {};\n\t\t${moduleSrc}\n\t\treturn module.exports.getDataExtractorApi();\n\t})())`;\n}\n\n/**\n * Returns standalone JS code representing an expression returns the data extraction API.\n * This expression returns an object of type `DataExtractorApi`.\n * If the API must be initialized with `getExpressionToInitializeDataExtractorApi()`,\n * it throws an exception containing the text of `ApiHasNotBeenInitializedCode`.\n * This function is called in the VS Code extension, the expression is evaluated in the debugee.\n */\nexport function getExpressionForDataExtractorApi(): string {\n\treturn `((${selfContainedGetInitializedDataExtractorApi.toString()})())`;\n}\n\nconst apiKey = \"@hediet/data-extractor-api/v2\";\n\nexport function getDataExtractorApi(): DataExtractorApi {\n\tinstallHelpers();\n\tconst globalObj =\n\t\ttypeof window === \"object\" ? (window as any) : (global as any);\n\tif (!globalObj[apiKey]) {\n\t\tglobalObj[apiKey] = new DataExtractorApiImpl();\n\t}\n\treturn globalObj[apiKey];\n}\n\n/**\n * This code is used to detect if the API has not been initialized yet.\n * @internal\n */\nexport const ApiHasNotBeenInitializedCode = \"EgH0cybXij1jYUozyakO\" as const;\n\n/**\n * @internal\n */\nfunction selfContainedGetInitializedDataExtractorApi(): DataExtractorApi {\n\tconst globalObj =\n\t\ttypeof window === \"object\" ? (window as any) : (global as any);\n\tconst key: typeof apiKey = \"@hediet/data-extractor-api/v2\";\n\tlet api: DataExtractorApi | undefined = globalObj[key];\n\tif (!api) {\n\t\tconst code: typeof ApiHasNotBeenInitializedCode =\n\t\t\t\"EgH0cybXij1jYUozyakO\";\n\t\tthrow new Error(\n\t\t\t`Data Extractor API has not been initialized. Code: ${code}`\n\t\t);\n\t}\n\treturn api;\n}\n\nexport function installHelpers(): void {\n\tconst globalObj =\n\t\ttypeof window === \"object\" ? (window as any) : (global as any);\n\t// `hediet` as prefix to avoid name collision (I own `hediet.de`).\n\tglobalObj[\"hedietDbgVis\"] = { ...helpers, ...globalHelpers };\n}\n","export * from \"./createGraph\";\nexport * from \"./createGraphFromPointers\";\nexport * from \"./tryEval\";\nexport * from \"./markedGrid\";\n","import {\n\tDataExtractorApi,\n\tDataResult,\n\tJSONString,\n\tDataExtractor,\n\tDataExtraction,\n\tExtractionCollector,\n} from \"./DataExtractorApi\";\nimport { ExtractedData, DataExtractorInfo } from \"../../DataExtractionResult\";\nimport { registerDefaultExtractors } from \"./default-extractors\";\n\nexport class DataExtractorApiImpl implements DataExtractorApi {\n\tpublic static lastEvalFn: (<T>(expression: string) => T) | undefined;\n\n\tprivate readonly extractors = new Map<\n\t\tstring,\n\t\tDataExtractor<ExtractedData>\n\t>();\n\n\tprivate toJson<TData>(data: TData): JSONString<TData> {\n\t\treturn JSON.stringify(data) as any;\n\t}\n\n\tpublic registerExtractor<TExtractedData extends ExtractedData>(\n\t\textractor: DataExtractor<TExtractedData>\n\t): void {\n\t\tthis.extractors.set(extractor.id, extractor);\n\t}\n\n\tpublic registerExtractors(\n\t\textractors: DataExtractor<ExtractedData>[]\n\t): void {\n\t\tfor (const e of extractors) {\n\t\t\tthis.registerExtractor(e);\n\t\t}\n\t}\n\n\tpublic getData(\n\t\tvalueFn: () => unknown,\n\t\tevalFn: <T>(expression: string) => T,\n\t\tpreferredDataExtractorId: string | undefined\n\t): JSONString<DataResult> {\n\t\tconst extractions = new Array<DataExtraction<ExtractedData>>();\n\t\tconst extractionCollector: ExtractionCollector<ExtractedData> = {\n\t\t\taddExtraction(extraction) {\n\t\t\t\textractions.push(extraction);\n\t\t\t},\n\t\t};\n\n\t\tDataExtractorApiImpl.lastEvalFn = evalFn;\n\t\tconst value = valueFn();\n\t\tDataExtractorApiImpl.lastEvalFn = undefined;\n\n\t\tfor (const e of this.extractors.values()) {\n\t\t\te.getExtractions(value, extractionCollector, { evalFn });\n\t\t}\n\t\textractions.sort((a, b) => b.priority - a.priority);\n\t\tlet usedExtraction = extractions[0];\n\t\tif (!usedExtraction) {\n\t\t\treturn this.toJson({ kind: \"NoExtractors\" } as DataResult);\n\t\t}\n\n\t\tif (preferredDataExtractorId) {\n\t\t\tconst preferred = extractions.find(\n\t\t\t\te => e.id === preferredDataExtractorId\n\t\t\t);\n\t\t\tif (preferred) {\n\t\t\t\tusedExtraction = preferred;\n\t\t\t}\n\t\t}\n\n\t\tfunction mapExtractor(\n\t\t\te: DataExtraction<ExtractedData>\n\t\t): DataExtractorInfo {\n\t\t\treturn {\n\t\t\t\tid: e.id as any,\n\t\t\t\tname: e.name,\n\t\t\t\tpriority: e.priority,\n\t\t\t};\n\t\t}\n\n\t\tconst data = usedExtraction.extractData();\n\t\treturn this.toJson({\n\t\t\tkind: \"Data\",\n\t\t\textractionResult: {\n\t\t\t\tdata,\n\t\t\t\tusedExtractor: mapExtractor(usedExtraction),\n\t\t\t\tavailableExtractors: extractions.map(mapExtractor),\n\t\t\t},\n\t\t} as DataResult);\n\t}\n\n\tpublic registerDefaultExtractors(preferExisting: boolean = false): void {\n\t\t// TODO consider preferExisting\n\t\tregisterDefaultExtractors(this);\n\t}\n}\n","export { registerDefaultExtractors } from \"./registerDefaultDataExtractors\";\n","export type DataExtractionResult = {\n\tdata: ExtractedData;\n\tusedExtractor: DataExtractorInfo;\n\tavailableExtractors: DataExtractorInfo[];\n};\n\n/**\n * Instances must be valid json values.\n */\nexport type ExtractedData = {\n\tkind: Record<string, true>;\n};\n\nexport type DataExtractorInfo = {\n\tid: DataExtractorId;\n\tname: string;\n\tpriority: number;\n};\n\nexport type DataExtractorId = {\n\t__brand: \"DataExtractorId\";\n} & string;\n\nexport function isExtractedData(val: unknown): val is ExtractedData {\n\tif (typeof val !== \"object\" || !val || !(\"kind\" in val)) {\n\t\treturn false;\n\t}\n\n\tconst obj = val as any;\n\tif (typeof obj.kind !== \"object\" || !obj.kind) {\n\t\treturn false;\n\t}\n\n\treturn Object.values(obj.kind).every(val => val === true);\n}\n","import {\n\tCommonDataTypes,\n\tEdgeGraphData,\n\tNodeGraphData,\n} from \"../../CommonDataTypes\";\n\nexport type CreateGraphEdge<T> = { to: T } & Omit<EdgeGraphData, \"from\" | \"to\">;\n\n/**\n * Given a list of roots, it creates a graph by following their edges recursively.\n * Tracks cycles.\n */\nexport function createGraph<T>(\n\troots: T[],\n\tinfoSelector: (\n\t\titem: T\n\t) => {\n\t\tid?: string | number;\n\t\tedges: CreateGraphEdge<T>[];\n\t} & Omit<NodeGraphData, \"id\">,\n\toptions: { maxSize?: number } = {}\n): CommonDataTypes.Graph {\n\tconst r: CommonDataTypes.Graph = {\n\t\tkind: {\n\t\t\tgraph: true,\n\t\t},\n\t\tnodes: [],\n\t\tedges: [],\n\t};\n\tlet idCounter = 1;\n\tconst ids = new Map<T, string>();\n\tfunction getId(item: T): string {\n\t\tconst _id = infoSelector(item).id;\n\t\tif (_id !== undefined) {\n\t\t\treturn \"\" + _id;\n\t\t}\n\n\t\tlet id = ids.get(item);\n\t\tif (!id) {\n\t\t\tid = `hediet.de/id-${idCounter++}`;\n\t\t\tids.set(item, id);\n\t\t}\n\t\treturn id;\n\t}\n\n\tconst queue = new Array<{ item: T; dist: number }>(\n\t\t...roots.map(r => ({ item: r, dist: 0 }))\n\t);\n\tconst processed = new Set<T>();\n\n\twhile (queue.length > 0) {\n\t\tconst { item, dist } = queue.shift()!;\n\t\tif (processed.has(item)) {\n\t\t\tcontinue;\n\t\t}\n\t\tprocessed.add(item);\n\t\tconst nodeInfo = infoSelector(item);\n\t\tconst fromId = getId(item);\n\t\tr.nodes.push({ ...nodeInfo, id: fromId, [\"edges\" as any]: undefined });\n\t\tfor (const e of nodeInfo.edges) {\n\t\t\tconst toId = getId(e.to);\n\t\t\tr.edges.push({\n\t\t\t\t...e,\n\t\t\t\tfrom: fromId,\n\t\t\t\tto: toId,\n\t\t\t});\n\t\t\tlet shouldPush = !processed.has(e.to);\n\t\t\tif (\n\t\t\t\toptions.maxSize &&\n\t\t\t\tprocessed.size + queue.length > options.maxSize\n\t\t\t) {\n\t\t\t\tshouldPush = false;\n\t\t\t}\n\t\t\tif (shouldPush) {\n\t\t\t\tqueue.push({ item: e.to, dist: dist + 1 });\n\t\t\t}\n\t\t}\n\t}\n\treturn r;\n}\n","export * from \"./js\";\nexport * from \"./CommonDataTypes\";\nexport * from \"./DataExtractionResult\";\n","export * from \"./api\";\nexport * from \"./helpers\";\nexport { registerDefaultExtractors } from \"./api/default-extractors\";\n","export * from \"./DataExtractorApi\";\nexport * from \"./injection\";\n","import { DataExtractorApi } from \"../DataExtractorApi\";\nimport { TypeScriptAstDataExtractor } from \"./TypeScriptDataExtractors\";\nimport { AsIsDataExtractor } from \"./AsIsDataExtractor\";\nimport { GetDebugVisualizationDataExtractor } from \"./GetDebugVisualizationDataExtractor\";\nimport { ToStringDataExtractor } from \"./ToStringExtractor\";\nimport { PlotDataExtractor } from \"./PlotlyDataExtractor\";\nimport { ObjectGraphExtractor } from \"./ObjectGraphExtractor\";\nimport { getDataExtractorApi } from \"../injection\";\nimport { GridExtractor } from \"./GridExtractor\";\n\n/**\n * The default data extractors should be registered by VS Code automatically.\n * Registering them manually ensures that they are up to date.\n */\nexport function registerDefaultExtractors(\n\tapi: DataExtractorApi = getDataExtractorApi()\n) {\n\tfor (const item of [\n\t\tnew TypeScriptAstDataExtractor(),\n\t\tnew AsIsDataExtractor(),\n\t\tnew GetDebugVisualizationDataExtractor(),\n\t\tnew ToStringDataExtractor(),\n\t\tnew PlotDataExtractor(),\n\t\tnew ObjectGraphExtractor(),\n\t\tnew GridExtractor(),\n\t]) {\n\t\tapi.registerExtractor(item);\n\t}\n}\n","import * as ts from \"typescript\"; // Only compile-time import!\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../DataExtractorApi\";\nimport { CommonDataTypes } from \"../../../CommonDataTypes\";\n\n// This class is self contained and can be injected into both nodejs and browser environments.\nexport class TypeScriptAstDataExtractor\n\timplements DataExtractor<CommonDataTypes.Ast> {\n\treadonly id = \"typescript-ast\";\n\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector<CommonDataTypes.Ast>,\n\t\t{ evalFn }: DataExtractorContext\n\t): void {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction getApi(): typeof ts {\n\t\t\tif (typeof data === \"object\" && \"typescript\" in (data as object)) {\n\t\t\t\treturn (data as any).typescript;\n\t\t\t} else {\n\t\t\t\t// This might refer to global.require which uses CWD for resolution!\n\t\t\t\tconst require = evalFn<(request: string) => unknown>(\"require\");\n\t\t\t\treturn require(\"typescript\") as typeof ts;\n\t\t\t}\n\t\t}\n\n\t\tlet tsApi: typeof ts;\n\t\ttry {\n\t\t\ttsApi = getApi();\n\t\t\tif (!tsApi) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction findKey(value: any, object: any): string | null {\n\t\t\tfor (var key in object) {\n\t\t\t\tif (key.startsWith(\"_\")) continue;\n\n\t\t\t\tvar member = object[key];\n\t\t\t\tif (member === value) return key;\n\n\t\t\t\tif (Array.isArray(member) && member.indexOf(value) !== -1) {\n\t\t\t\t\treturn key;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tfunction getChildren(node: ts.Node): ts.Node[] {\n\t\t\tconst result = new Array<ts.Node>();\n\t\t\ttsApi.forEachChild(node, n => {\n\t\t\t\tresult.push(n);\n\t\t\t});\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction toTreeNode(\n\t\t\tnode: ts.Node,\n\t\t\tmemberName: string,\n\t\t\tmarked: Set<ts.Node>,\n\t\t\temphasizedValueFn: (node: ts.Node) => string | undefined\n\t\t): CommonDataTypes.Ast[\"root\"] {\n\t\t\tconst name = tsApi.SyntaxKind[node.kind];\n\t\t\tconst children = getChildren(node)\n\t\t\t\t.map((childNode, idx) => {\n\t\t\t\t\tlet parentPropertyName = findKey(childNode, node) || \"\";\n\t\t\t\t\tif (childNode.kind == tsApi.SyntaxKind.SyntaxList) {\n\t\t\t\t\t\tconst children = getChildren(childNode);\n\t\t\t\t\t\tchildren.some(c => {\n\t\t\t\t\t\t\tparentPropertyName = findKey(c, node) || \"\";\n\t\t\t\t\t\t\treturn !!parentPropertyName;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (children.length === 0) return null!;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (node.kind == tsApi.SyntaxKind.SyntaxList) {\n\t\t\t\t\t\tparentPropertyName = \"\" + idx;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn toTreeNode(\n\t\t\t\t\t\tchildNode,\n\t\t\t\t\t\tparentPropertyName,\n\t\t\t\t\t\tmarked,\n\t\t\t\t\t\temphasizedValueFn\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.filter(c => c !== null);\n\n\t\t\tlet value: string | undefined = undefined;\n\n\t\t\tif (tsApi.isIdentifier(node)) {\n\t\t\t\tvalue = node.text || (node.escapedText as string);\n\t\t\t} else if (tsApi.isLiteralExpression(node)) {\n\t\t\t\tvalue = node.text;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tname: name,\n\t\t\t\tid: memberName,\n\t\t\t\tchildren: children,\n\t\t\t\tdata: {\n\t\t\t\t\tlength: node.end - node.pos,\n\t\t\t\t\tposition: node.pos,\n\t\t\t\t},\n\t\t\t\temphasizedValue: emphasizedValueFn(node),\n\t\t\t\tisMarked: marked.has(node),\n\t\t\t\tvalue,\n\t\t\t};\n\t\t}\n\n\t\tfunction isNode(node: unknown): node is ts.Node {\n\t\t\treturn (\n\t\t\t\ttypeof node === \"object\" &&\n\t\t\t\tnode !== null &&\n\t\t\t\t(tsApi.isToken(node as any) || (tsApi as any).isNode(node))\n\t\t\t);\n\t\t}\n\n\t\tfunction getSourceFile(node: ts.Node | any): ts.SourceFile {\n\t\t\tif (!node) {\n\t\t\t\tthrow new Error(\"Detached node\");\n\t\t\t}\n\t\t\tif (tsApi.isSourceFile(node)) {\n\t\t\t\treturn node;\n\t\t\t}\n\t\t\tif (!(\"getSourceFile\" in node)) {\n\t\t\t\treturn getSourceFile(node.parent);\n\t\t\t}\n\t\t\treturn node.getSourceFile();\n\t\t}\n\n\t\tlet rootSourceFile: ts.SourceFile | undefined = undefined;\n\t\tlet rootNode: ts.Node | undefined = undefined;\n\t\tlet marked: Set<ts.Node>;\n\t\tlet fn: (n: ts.Node) => string | undefined = (n: ts.Node) => undefined;\n\t\tif (Array.isArray(data) && data.every(isNode) && data.length > 0) {\n\t\t\trootSourceFile = getSourceFile(data[0] as ts.Node);\n\t\t\tmarked = new Set(data);\n\t\t} else if (isNode(data)) {\n\t\t\trootSourceFile = getSourceFile(data);\n\t\t\tmarked = new Set([data]);\n\t\t} else if (typeof data === \"object\" && data) {\n\t\t\tmarked = new Set();\n\t\t\tconst map = new Map<ts.Node, string>();\n\t\t\tfn = (n: ts.Node) => map.get(n);\n\t\t\tfor (const [key, item] of Object.entries(data)) {\n\t\t\t\tif (key === \"fn\") {\n\t\t\t\t\tfn = item;\n\t\t\t\t} else if (key === \"typescript\") {\n\t\t\t\t} else {\n\t\t\t\t\tif (key === \"rootNode\") {\n\t\t\t\t\t\trootNode = item;\n\t\t\t\t\t}\n\t\t\t\t\tlet nodes: Array<ts.Node>;\n\t\t\t\t\tif (isNode(item)) {\n\t\t\t\t\t\tnodes = [item];\n\t\t\t\t\t} else if (Array.isArray(item) && item.every(isNode)) {\n\t\t\t\t\t\tnodes = item;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (nodes.length > 0 && !rootSourceFile) {\n\t\t\t\t\t\trootSourceFile = getSourceFile(nodes[0]);\n\t\t\t\t\t}\n\t\t\t\t\tfor (const n of nodes) {\n\t\t\t\t\t\tmarked.add(n);\n\t\t\t\t\t\tmap.set(n, key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!rootSourceFile) {\n\t\t\treturn;\n\t\t}\n\t\tconst finalRootSourceFile = rootSourceFile;\n\n\t\tcollector.addExtraction({\n\t\t\tid: \"ts-ast\",\n\t\t\tname: \"TypeScript AST\",\n\t\t\tpriority: 1000,\n\t\t\textractData() {\n\t\t\t\treturn {\n\t\t\t\t\tkind: { text: true, tree: true, ast: true },\n\t\t\t\t\troot: toTreeNode(\n\t\t\t\t\t\trootNode || finalRootSourceFile,\n\t\t\t\t\t\t\"root\",\n\t\t\t\t\t\tmarked,\n\t\t\t\t\t\tfn\n\t\t\t\t\t),\n\t\t\t\t\ttext: finalRootSourceFile.text,\n\t\t\t\t\tfileName: \"index.ts\",\n\t\t\t\t};\n\t\t\t},\n\t\t});\n\t}\n}\n","import { ExtractedData, isExtractedData } from \"../../../DataExtractionResult\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../..\";\n\nexport class AsIsDataExtractor implements DataExtractor<ExtractedData> {\n\treadonly id = \"as-is\";\n\tgetExtractions(\n\t\tdata: unknown,\n\t\textractionCollector: ExtractionCollector<ExtractedData>,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tif (!isExtractedData(data)) {\n\t\t\treturn;\n\t\t}\n\n\t\textractionCollector.addExtraction({\n\t\t\tid: this.id,\n\t\t\tname: \"As Is\",\n\t\t\tpriority: 500,\n\t\t\textractData() {\n\t\t\t\treturn data;\n\t\t\t},\n\t\t});\n\t}\n}\n","import { ExtractedData } from \"../../../DataExtractionResult\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../DataExtractorApi\";\n\nexport class GetDebugVisualizationDataExtractor\n\timplements DataExtractor<ExtractedData> {\n\treadonly id = \"get-debug-visualization\";\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector<ExtractedData>,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tif (\n\t\t\ttypeof data !== \"object\" ||\n\t\t\t!data ||\n\t\t\t!(\"getDebugVisualization\" in data)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tcollector.addExtraction({\n\t\t\tid: this.id,\n\t\t\tname: \"Use Method 'getDebugVisualization'\",\n\t\t\tpriority: 600,\n\t\t\textractData() {\n\t\t\t\treturn (data as any).getDebugVisualization();\n\t\t\t},\n\t\t});\n\t}\n}\n","import { ExtractedData } from \"../../../DataExtractionResult\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../DataExtractorApi\";\n\nexport class ToStringDataExtractor implements DataExtractor<ExtractedData> {\n\treadonly id = \"to-string\";\n\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector<ExtractedData>,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tcollector.addExtraction({\n\t\t\tid: \"to-string\",\n\t\t\tname: \"To String\",\n\t\t\tpriority: 100,\n\t\t\textractData() {\n\t\t\t\treturn {\n\t\t\t\t\tkind: {\n\t\t\t\t\t\ttext: true,\n\t\t\t\t\t},\n\t\t\t\t\ttext: \"\" + data,\n\t\t\t\t};\n\t\t\t},\n\t\t});\n\t}\n}\n","import { ExtractedData } from \"../../../DataExtractionResult\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../DataExtractorApi\";\nimport { CommonDataTypes } from \"../../../CommonDataTypes\";\n\nexport class PlotDataExtractor implements DataExtractor<ExtractedData> {\n\treadonly id = \"plot\";\n\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector<ExtractedData>,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tif (!Array.isArray(data)) {\n\t\t\treturn;\n\t\t}\n\t\tif (data.some(x => typeof x !== \"number\")) {\n\t\t\treturn;\n\t\t}\n\n\t\tcollector.addExtraction({\n\t\t\tid: \"plot-y\",\n\t\t\tname: \"Plot as y-Values\",\n\t\t\tpriority: 1001,\n\t\t\textractData() {\n\t\t\t\treturn {\n\t\t\t\t\tkind: {\n\t\t\t\t\t\tplotly: true,\n\t\t\t\t\t},\n\t\t\t\t\tdata: [{ y: data }],\n\t\t\t\t} as CommonDataTypes.Plotly;\n\t\t\t},\n\t\t});\n\t}\n}\n","import { ExtractedData } from \"../../../DataExtractionResult\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../DataExtractorApi\";\nimport { createGraph, CreateGraphEdge } from \"../../helpers\";\n\nexport class ObjectGraphExtractor implements DataExtractor<ExtractedData> {\n\treadonly id = \"object-graph\";\n\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector<ExtractedData>,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tfunction isObject(val: unknown): val is object {\n\t\t\tif (typeof val !== \"object\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!val) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tif (!isObject(data)) {\n\t\t\treturn;\n\t\t}\n\n\t\tcollector.addExtraction({\n\t\t\tid: \"object-graph\",\n\t\t\tname: \"Object Graph\",\n\t\t\tpriority: 99,\n\t\t\textractData() {\n\t\t\t\treturn createGraph(\n\t\t\t\t\t[data],\n\t\t\t\t\titem => {\n\t\t\t\t\t\tlet label = \"\";\n\t\t\t\t\t\tconst edges = new Array<CreateGraphEdge<any>>();\n\t\t\t\t\t\tif (item instanceof Set) {\n\t\t\t\t\t\t\tlabel = \"Set\";\n\t\t\t\t\t\t\tfor (const value of item.values()) {\n\t\t\t\t\t\t\t\tif (isObject(value)) {\n\t\t\t\t\t\t\t\t\tedges.push({ label: \"item\", to: value });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (item instanceof Map) {\n\t\t\t\t\t\t\tlabel = \"Map\";\n\t\t\t\t\t\t\tfor (const [key, value] of item.entries()) {\n\t\t\t\t\t\t\t\tif (isObject(value)) {\n\t\t\t\t\t\t\t\t\tedges.push({ label: key, to: value });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (const [key, val] of Object.entries(item)) {\n\t\t\t\t\t\t\t\tif (isObject(val)) {\n\t\t\t\t\t\t\t\t\tedges.push({ label: key, to: val });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst className = item.constructor\n\t\t\t\t\t\t\t\t? item.constructor.name\n\t\t\t\t\t\t\t\t: \"?\";\n\t\t\t\t\t\t\tlabel = className;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tshape: \"box\",\n\t\t\t\t\t\t\tedges,\n\t\t\t\t\t\t\tcolor: item === data ? \"lightblue\" : undefined,\n\t\t\t\t\t\t\tlabel,\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\t{ maxSize: 50 }\n\t\t\t\t);\n\t\t\t},\n\t\t});\n\t}\n}\n","import { NodeGraphData, CommonDataTypes } from \"../../CommonDataTypes\";\nimport { CreateGraphEdge, createGraph } from \"./createGraph\";\n\n/**\n * Given a labeled list of roots, it creates a graph by following their edges recursively.\n * Tracks cycles.\n */\nexport function createGraphFromPointers<T>(\n\troots: Record<string, T | undefined | null>,\n\tinfoSelector: (\n\t\titem: T\n\t) => {\n\t\tid?: string | number;\n\t\tedges: CreateGraphEdge<T>[];\n\t} & Omit<NodeGraphData, \"id\">\n): CommonDataTypes.Graph {\n\tconst marker = {};\n\n\tinterface Pointer {\n\t\tmarker: {};\n\t\tname: string;\n\t\tvalue: T | null | undefined;\n\t}\n\n\tconst items = Object.entries(roots).map<Pointer>(([name, value]) => ({\n\t\tmarker,\n\t\tname,\n\t\tvalue,\n\t}));\n\n\treturn createGraph<T | Pointer>(items, item => {\n\t\tif (\"marker\" in item && item[\"marker\"] === marker) {\n\t\t\treturn {\n\t\t\t\tid: \"label____\" + item.name,\n\t\t\t\tcolor: \"orange\",\n\t\t\t\tlabel: item.name,\n\t\t\t\tedges: [{ to: item.value!, color: \"orange\", label: \"\" }].filter(\n\t\t\t\t\tt => !!t.to\n\t\t\t\t),\n\t\t\t};\n\t\t} else {\n\t\t\treturn infoSelector(item as T);\n\t\t}\n\t});\n}\n","import { DataExtractorApiImpl } from \"../api/DataExtractorApiImpl\";\n\n/**\n * Takes an object and eval's its values.\n * Each successfully evaluated value is added to the result object,\n * its original key is used as key in the result object.\n *\n * # Example\n * ```\n * const x = 1;\n * tryEval({ val1: \"x\", val2: \"x y\" })\n * // -> { val1: 1 }\n * ```\n */\nexport function tryEval(obj: Record<string, string>): Record<string, unknown>;\n/**\n * Takes an array of strings and eval's its items.\n * Each successfully evaluated value is added to the result object,\n * its original value is used as key.\n *\n * # Example\n * ```\n * const x = 1;\n * tryEval([\"x\", \"y\", \"a a\", \"x + 2\"])\n * // -> { x: 1, \"x + 2\": 3 }\n * ```\n */\nexport function tryEval(arr: string[]): Record<string, unknown>;\nexport function tryEval(\n\tobj: Record<string, string> | string[] | string\n): Record<string, unknown> | unknown {\n\tconst result: Record<string, unknown> = {};\n\tconst evalFn = DataExtractorApiImpl.lastEvalFn!;\n\tif (Array.isArray(obj)) {\n\t\tfor (const val of obj) {\n\t\t\ttry {\n\t\t\t\tresult[val] = evalFn(val);\n\t\t\t} catch (e) {}\n\t\t}\n\t} else {\n\t\tfor (const [key, val] of Object.entries(obj)) {\n\t\t\ttry {\n\t\t\t\tresult[key] = evalFn(val);\n\t\t\t} catch (e) {}\n\t\t}\n\t}\n\treturn result;\n}\n","import { CommonDataTypes } from \"../../CommonDataTypes\";\n\nexport function markedGrid(\n\tarr: any[],\n\tmarked: Record<string, number>\n): CommonDataTypes.Grid {\n\treturn {\n\t\tkind: { array: true },\n\t\trows: [{ columns: arr.map(d => ({ tag: d })) }],\n\t\tmarkers: Object.entries(marked).map(([key, val]) => ({\n\t\t\tid: key,\n\t\t\trow: 0,\n\t\t\tcolumn: val,\n\t\t})),\n\t};\n}\n","import { ExtractedData } from \"../../../DataExtractionResult\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../..\";\nimport { CommonDataTypes } from \"../../../CommonDataTypes\";\n\nexport class GridExtractor implements DataExtractor<ExtractedData> {\n\treadonly id = \"grid\";\n\tgetExtractions(\n\t\tdata: unknown,\n\t\textractionCollector: ExtractionCollector<ExtractedData>,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tif (!Array.isArray(data)) {\n\t\t\treturn;\n\t\t}\n\n\t\textractionCollector.addExtraction({\n\t\t\tid: this.id,\n\t\t\tname: \"Array As Grid\",\n\t\t\tpriority: 500,\n\t\t\textractData(): CommonDataTypes.Grid {\n\t\t\t\treturn {\n\t\t\t\t\tkind: { array: true },\n\t\t\t\t\trows: [{ columns: data.map(d => ({ tag: d })) }],\n\t\t\t\t};\n\t\t\t},\n\t\t});\n\t}\n}\n","export { getDataExtractorApi as getApi } from \"./api/injection\";\n","module.exports = require(\"fs\");","import { ExtractedData } from \"./DataExtractionResult\";\n\nexport type CommonDataType =\n\t| CommonDataTypes.Text\n\t| CommonDataTypes.Svg\n\t| CommonDataTypes.Html\n\t| CommonDataTypes.DotGraph\n\t| CommonDataTypes.Tree\n\t| CommonDataTypes.Ast\n\t| CommonDataTypes.Graph\n\t| CommonDataTypes.Plotly\n\t| CommonDataTypes.Grid;\n\nexport function isCommonDataType<T>(\n\tdata: ExtractedData,\n\tkind: T\n): data is Narrow<CommonDataType, { kind: T }> {\n\tfor (const key of Object.keys(kind)) {\n\t\tif (!(key in data.kind)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ntype Narrow<T, TKind> = T extends TKind ? T : never;\n\nexport module CommonDataTypes {\n\texport interface Text {\n\t\tkind: { text: true };\n\t\ttext: string;\n\t\tmimeType?: string;\n\t\tfileName?: string;\n\t}\n\n\texport interface Graph {\n\t\tkind: { graph: true };\n\t\tnodes: NodeGraphData[];\n\t\tedges: EdgeGraphData[];\n\t}\n\n\texport interface Svg extends Text {\n\t\tkind: { text: true; svg: true };\n\t}\n\n\texport interface Html extends Text {\n\t\tkind: { text: true; html: true };\n\t}\n\n\texport interface DotGraph extends Text {\n\t\tkind: { text: true; dotGraph: true };\n\t}\n\n\texport interface Tree<TData = unknown> {\n\t\tkind: { tree: true };\n\t\troot: TreeNode<TData>;\n\t}\n\n\texport interface Grid {\n\t\tkind: { array: true };\n\t\tcolumnLabels?: { label?: string }[];\n\t\trows: {\n\t\t\tlabel?: string;\n\t\t\tcolumns: {\n\t\t\t\tcontent?: string;\n\t\t\t\ttag?: string;\n\t\t\t\tcolor?: string;\n\t\t\t}[];\n\t\t}[];\n\t\tmarkers?: {\n\t\t\tid: string;\n\n\t\t\trow: number;\n\t\t\tcolumn: number;\n\t\t\trows?: number;\n\t\t\tcolumns?: number;\n\n\t\t\tlabel?: string;\n\t\t\tcolor?: string;\n\t\t}[];\n\t}\n\n\texport interface Ast\n\t\textends Tree<{\n\t\t\t\tposition: number;\n\t\t\t\tlength: number;\n\t\t\t}>,\n\t\t\tText {\n\t\tkind: { text: true; tree: true; ast: true };\n\t}\n\n\texport interface Plotly {\n\t\tkind: { plotly: true };\n\t\tdata: Partial<Plotly.Data>[];\n\t}\n}\n\nexport interface TreeNode<TExtraData> {\n\tname: string;\n\tchildren: TreeNode<TExtraData>[];\n\tdata: TExtraData;\n\tid?: string;\n\tvalue?: string;\n\temphasizedValue?: string;\n\tisMarked?: boolean;\n}\n\nexport interface NodeGraphData {\n\tid: string;\n\tlabel?: string;\n\tcolor?: string;\n\tshape?: \"ellipse\" | \"box\";\n}\n\nexport interface EdgeGraphData {\n\tfrom: string;\n\tto: string;\n\tlabel?: string;\n\tid?: string;\n\tcolor?: string;\n\tdashes?: boolean;\n}\n"],"sourceRoot":""}