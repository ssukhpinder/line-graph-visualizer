import { ExtractedData } from "./DataExtractionResult";
export declare type CommonDataType = CommonDataTypes.Text | CommonDataTypes.Svg | CommonDataTypes.Html | CommonDataTypes.DotGraph | CommonDataTypes.Tree | CommonDataTypes.Ast | CommonDataTypes.Graph | CommonDataTypes.Plotly | CommonDataTypes.Grid;
export declare function isCommonDataType<T>(data: ExtractedData, kind: T): data is Narrow<CommonDataType, {
    kind: T;
}>;
declare type Narrow<T, TKind> = T extends TKind ? T : never;
export declare module CommonDataTypes {
    interface Text {
        kind: {
            text: true;
        };
        text: string;
        mimeType?: string;
        fileName?: string;
    }
    interface Graph {
        kind: {
            graph: true;
        };
        nodes: NodeGraphData[];
        edges: EdgeGraphData[];
    }
    interface Svg extends Text {
        kind: {
            text: true;
            svg: true;
        };
    }
    interface Html extends Text {
        kind: {
            text: true;
            html: true;
        };
    }
    interface DotGraph extends Text {
        kind: {
            text: true;
            dotGraph: true;
        };
    }
    interface Tree<TData = unknown> {
        kind: {
            tree: true;
        };
        root: TreeNode<TData>;
    }
    interface Grid {
        kind: {
            array: true;
        };
        columnLabels?: {
            label?: string;
        }[];
        rows: {
            label?: string;
            columns: {
                content?: string;
                tag?: string;
                color?: string;
            }[];
        }[];
        markers?: {
            id: string;
            row: number;
            column: number;
            rows?: number;
            columns?: number;
            label?: string;
            color?: string;
        }[];
    }
    interface Ast extends Tree<{
        position: number;
        length: number;
    }>, Text {
        kind: {
            text: true;
            tree: true;
            ast: true;
        };
    }
    interface Plotly {
        kind: {
            plotly: true;
        };
        data: Partial<Plotly.Data>[];
    }
}
export interface TreeNode<TExtraData> {
    name: string;
    children: TreeNode<TExtraData>[];
    data: TExtraData;
    id?: string;
    value?: string;
    emphasizedValue?: string;
    isMarked?: boolean;
}
export interface NodeGraphData {
    id: string;
    label?: string;
    color?: string;
    shape?: "ellipse" | "box";
}
export interface EdgeGraphData {
    from: string;
    to: string;
    label?: string;
    id?: string;
    color?: string;
    dashes?: boolean;
}
export {};
//# sourceMappingURL=CommonDataTypes.d.ts.map